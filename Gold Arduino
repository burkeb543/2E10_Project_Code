#include <PID_v2.h>
#include <WiFiNINA.h>
#include <Arduino_LSM6DS3.h>
char ssid[] = ""; // Add WiFi Name
char pass[] = "";  // Add WiFi password

const int REYE = 10; // Right IR Sensor digital pin
const int LEYE = 9;  // Left IR Sensor digital pin

const int LM1 = 2; // Left Motor Logic Pin 1
const int LM2 = 3; // Left Motor Logic Pin 2
const int RM1 = 5; // Right Motor Logic Pin 1
const int RM2 = 6; // Right Motor Logic Pin 2

const int echoPin = 15; // Echo Pin for Ultrasonic
const int trigPin = 14; // Trig Pin for Ultrasonic

int LEYE_Status; // Current status of Left IR Sensor
int REYE_Status; // Current status of Right IR Sensor

long duration; // Length of time for ultrasonic ping to return
int distance; // Distance from buggy to obstacle

bool obstacleInFront = false; // Set to true if obstacle within 10cm detected
bool drive = false; // Set to true if start or automatic button pressed
bool manual = false; // Set to true if manual mode button pressed 

unsigned long myTime; // Variable to store the time instant when a manual instruction received from processing
unsigned long timeSinceManual; // Variable to store the length of time since a manual instruction received

int count; // Count how many times the code has been looped through

// Declaration of servers to communicate with processing
WiFiServer server(80);
WiFiServer server_2(300);

// Declaration of PID variables 
double Setpoint, Input, Output;
double Kp = 16; // Kp higher than 10
double Ki = 0.14; //  Ki needs to be very small
double Kd = 0; // Kd keep as 0 because Kd is a derivative and will only work for steady signals so the rate of error is always changing
PID myPID(&Input, &Output, &Setpoint, Kp, Ki, Kd, DIRECT); // Declaration of PID object

void setup()
{
  Serial.begin(9600);
  if (!IMU.begin()){
    Serial.println("Failed to initialize IMU");
  }
  if (IMU.begin()){
    Serial.println("IMU Initialized!");;
  }
 
  Setpoint = 20; // At 20cm the buggy is going to stop
   
  //turn the PID on
  myPID.SetMode(AUTOMATIC);
  myPID.SetOutputLimits(0,255);

  pinMode( LM2, OUTPUT ); // Set Left Motor Logic pin 2 as output
  pinMode( LM1, OUTPUT ); // Set Left Motor Logic pin 1 as output
  pinMode( RM1, OUTPUT ); // Set Right Motor Logic pin 1 as output
  pinMode( RM2, OUTPUT ); // Set Right Motor Logic pin 2 as output
  pinMode( LEYE, INPUT ); // Set Left IR Sensor as input
  pinMode( REYE, INPUT ); // Set Right IR Sensor as input
  pinMode( LM2, LOW); // Set Left Motor Logic pin 2 to low
  pinMode( LM1, LOW); // Set Left Motor Logic pin 1 to low
  pinMode( RM1, LOW); // Set Right Motor Logic pin 1 to low
  pinMode( RM2, LOW); // Set Right Motor Logic pin 2 to low
  pinMode(trigPin, OUTPUT); // trigPin set to OUTPUT
  pinMode(echoPin, INPUT); // echoPin set to INPUT

  WiFi.begin(ssid, pass); // Initialize the WiFi library's network settings
  IPAddress ip = WiFi.localIP(); // IP Address of arduino
  Serial.print("IP Address:");
  Serial.println(ip);

  // Tell servers to listen for incoming client connections
  server.begin();
  server_2.begin();
  count = 0; // Initialise variable to count loop iterations
}
 
void loop() {
 processInstruct(); // Check if any signals received from processing

 if ( manual ){ // If buggy is in manual mode
   manualInstruct(); // Function which checks which WASD key was pressed and calls the appropriate function
 }
 
 if( drive){ // If drive boolean is true proceed to drive 
    driveBuggy();
 }

 if ( !manual && !drive ){ // If stop signal received from processing
  S(); // Stop the buggy
 }

 IMU_fn(); // Send acceleration and gyroscopic data to processing
}


// Function to deal with acceleration and gyroscopic data
void IMU_fn(){
  
  // Declaration of variables to store sensor data
  float aX, aY, aZ;
  float gX, gY, gZ;
 
  if(
    IMU.accelerationAvailable()
    && IMU.gyroscopeAvailable()
  ){
    IMU.readAcceleration(aX, aY, aZ);
    IMU.readGyroscope(gX, gY, gZ);

    // Scaling values increases mapping accuracy
    aX = aX * 100;
    aY = aY * 100;
    aZ = aZ * 100;
    gX = gX * 100;
    gY = gY * 100;
    gZ = gZ * 100;
    

    // Values mapped using values which were determined through extensive measuring
    char ax = map(aX, -56, 82, 0, 127);
    char ay = map(aY, -50, 44, 0, 127);
    char az = map(aZ, 60, 150, 0, 127);
    char gx = map(gX, -1636, 1642, 0, 127);
    char gy = map(gY, -2112, 1526, 0, 127);
    char gz = map(gZ, -17627, 17584, 0, 127);

    // Creating a char array to send to processing
    char ag[7] = {ax, ay, az, gx, gy, gz};

    // Sensor data sent to processing
    server.write(ag);
   
  }

  // Re-initialise the IMU periodically to prevent drift over time
  if ( count > 100 ){
    IMU.end();
    IMU.begin();
  }
}


void driveBuggy(){
 
  LEYE_Status = digitalRead( LEYE ); // Obtain status of Left Eye
  REYE_Status = digitalRead( REYE ); // Obtain current status of Right Eye

  Input = findDistance(); // Store distance to object in variable Input
 
  myPID.Compute(); // now output has value

  if (!LEYE_Status){ // If left IR sensor detects white
    analogWrite(LM2, Output);
  }
  else{
    pinMode( LM2, LOW);
  }

  if (!REYE_Status){
    analogWrite(RM2, Output);
  }
  else{
    pinMode( RM2, LOW);
  }
 
}


// Returns distance between buggy and object
double findDistance(){ 
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  duration = pulseIn(echoPin, HIGH);
  distance = (duration-10) * 0.017;
  
  return distance;
}


// Receive start/stop or manual/automatic instructions from processing
void processInstruct(){
  WiFiClient client = server.available(); // Waiting for a client to connect
  char c = client.read(); // Read signal from processing

  switch( c ){
    case 'l': drive = true; // If start signal received from client
    manual = false;
    break;
    case 'p': drive = false; // If Stop signal received from client
    manual = false;
    S(); // Stop the buggy
    break;
    case 'm': manual = true; // If manual signal received from client
    drive = false;
    break;
    case 'g': manual = false; // If automatic signal received from client
    drive = true;
    break;
    default: break;
  }

}


// Process instructions for manual control of the buggy
void manualInstruct(){
  WiFiClient client2 = server_2.available(); // Waiting for a client to connect
  char m = client2.read();

  switch( m ){
    case 'w': forward(); // Move forward if w key pressed
    myTime = millis();
    break;
    case 's': backward(); // Move backward if s key pressed
    myTime = millis();
    break;
    case 'a': left(); // Turn left if a key pressed
    myTime = millis();
    break;
    case 'd': right(); // Turn right if d key pressed
    myTime = millis();
    break;
    case 'e': spinRight(); // Spin buggy right if e key pressed
    myTime = millis();
    break;
    case 'q': spinLeft(); // Spin buggy left if q key pressed
    myTime = millis();
    break;
    case 'k': S(); // Stop buggy if spacebar key pressed
    break;
    default: break;
  }
  
  timeSinceManual = millis() - myTime; // Calculate time since a key was pressed
  if (timeSinceManual > 1000){
    S(); // Stop the buggy if no key pressed for a second
  }
}


// Move the buggy forward
void forward(){
  pinMode( LM1, LOW);
  analogWrite( LM2, 40);
  pinMode( RM1, LOW);
  analogWrite( RM2, 40);
}


// Reverse the buggy
void backward(){
  analogWrite( LM1, 40);
  pinMode( LM2, LOW);
  analogWrite( RM1, 40);
  pinMode( RM2, LOW);
}


//Turn buggy right
void right(){
  pinMode( LM1, LOW);
  analogWrite( LM2, 90);
  pinMode( RM1, LOW);
  pinMode( RM2, LOW);
}


// Turn buggy left
void left(){
  pinMode( LM1, LOW);
  pinMode( LM2, LOW);
  pinMode( RM1, LOW);
  analogWrite( RM2, 90);
}


// Stop buggy
void S(){
  pinMode( LM1, LOW);
  pinMode( LM2, LOW);
  pinMode( RM1, LOW);
  pinMode( RM2, LOW);
}


// Spin buggy to the right
void spinRight(){
  pinMode( LM1, LOW);
  pinMode( LM2, HIGH);
  pinMode( RM1, HIGH);
  pinMode( RM2, LOW);
}

// Spin buggy to the left
void spinLeft(){
  pinMode( LM1, HIGH);
  pinMode( LM2, LOW);
  pinMode( RM1, LOW);
  pinMode( RM2, HIGH);
}
