import controlP5.*;
import processing.net.*;

// Creation of controlP5 object
ControlP5 cp5;

// Creation of PFont objects
PFont f;
PFont g;

// Creation of Client objects
Client myClient;
Client myClient_2;

 
void setup() {
  frameRate(30); // Set framerate to 30
  f = createFont("Arial", 15); // Initialising PFont object f
  g = createFont("Arial", 60); // Initialising PFont object g
  
  size(1000,1000); // Set screen width to 1000 and height to 1000
  
  String IP_Address = ""; // String to store IP Address
  
  // Initialising client objects
  myClient =new Client(this,IP_Address,80);
  myClient_2 =new Client(this,IP_Address,300);
  
  cp5 = new ControlP5(this); // Initialise controlP5 object
  
  cp5.addButton("Start") // Add Start Button to screen
  .setValue(0)
  .setPosition(450,410)
  .setSize(100,30) // Set size of button as width = 100 and height = 30
  .setColorBackground( color(34,139,34)); // Set color of button
 
  cp5.addButton("Manual") // Add Manual Button to screen to enable manual mode
  .setValue(0)
  .setPosition(350,500)
  .setSize(100,30) 
  .setColorBackground( color(10,176,157));
  
  cp5.addButton("Automatic") // Add Automatic Button to screen which disables manual mode and enables automatic mode
  .setValue(0)
  .setPosition(550,500)
  .setSize(100,30) 
  .setColorBackground( color(255,99,97));
  
  cp5.addButton("Stop") // Add Stop Button to screen
  .setValue(0)
  .setPosition(450,590)
  .setSize(100,30)
  .setColorBackground( color(255,0,0));
  
  rectMode(CENTER); //  Interpret the first two parameters of rect() as the shape's center point, while the third and fourth parameters are its width and height.
  textAlign(CENTER, CENTER); //  Horizontal and vertical alignment respectively
  
  noStroke(); // Disables drawing the stroke
 
  background(40); // Set background color of sketch 

}  


void draw() {
 
  // Declaration of chars to store acceleration and gyroscopic data
  char ax, ay, az, gx, gy, gz;
  
   // Declaration of floats to which chars representing sensor data read in from arduino will be mapped
  float aX, aY, aZ, gX, gY, gZ;
 
  textFont(f);
  
  if(myClient.available() > 0){ // If any bytes are available to be read from the arduino server return true
    String g_Data = myClient.readString();  // Read in string containing gyroscopic data for y and z directions
    background(40); // Refresh background
    
    // Display relevant labels for the data displayed on the top and bottom of the processing window
    textFont(g);
    fill(255);
    text("Gyroscopic Data",500,50);
    text("Acceleration Data",500,900);
    
    // Display manual control buttons to user
    textFont(f);
    text("Forward: w\nReverse: s\nRight: d\nLeft: a",920,115);
    text("Spin right: e\nSpin left: q\nStop: Spacebar\n",80,130);
  
   
    char[] ch = new char[7]; // Create char array to store string elements
    for(int i = 0; i < 6; i++){
      ch[i] = g_Data.charAt(i); // Copying chars from string to char array
    }
    
    // Assigning values from char array to individual chars
    ax = ch[0];
    ay = ch[1];
    az = ch[2];
    gx = ch[3];
    gy = ch[4];
    gz = ch[5];
    
    
    int gY_int = int(gy); // Convert char storing pitch to an integer
    gY = map(gY_int, 0, 127, -21.12, 15.26); // Remap number back from char to float
    fill(255);
    text("Pitch: "+nf(gY, 0, 2)+" °/s",500,300); // Display value for pitch
    
    int side_gY = abs(63-gY_int); // Determine length of rectangle by finding magnitude of the pitch
    fill(255, 255, 0);
    rect(500, 200, side_gY*2, 55); // Display rectangle
    
    
    int gZ_int = int(gz); // Convert char storing yaw to an integer
    gZ = map(gZ_int, 0, 127, -176.27, 175.84); // Remap number back from char to float
    fill(255);
    text("Yaw: "+nf(gZ, 0, 2)+" °/s",750,450); // Display value for yaw
    int side_gZ = abs(63-gZ_int); // Determine length of rectangle by finding magnitude of the yaw
    fill(255, 94, 19);
    rect(750, 350, side_gZ*2, 55); // Create a rectangle which reflects the magnitude of the yaw
    
    
    int gX_int = int(gx); // Convert char storing roll to an integer
    gX = map(gX_int, 0, 127, -16.36, 16.42); // Remap number back from char to float
    fill(255);
    text("Roll: "+nf(gX, 0, 2)+" °/s",250,450); // Display value for roll
    int side_gX = abs(63-gX_int); // Determine length of rectangle by finding magnitude of the roll
    fill(0, 255, 0);
    rect(250, 350, side_gX*2, 55); // Create a rectangle which reflects the magnitude of the roll
    
    
    
    // Displaying data for acceleration in x-direction
    int aX_int = int(ax); // Typecast char read in to integer form
    int radius_aX = abs(63-aX_int); // Determine radius of circle to represent magnitude of the acceleration in x-direction
    fill(0, 0, 255); // Set color of circle to blue
    circle(250, 650, radius_aX*2); // Display circle
    aX = map(aX_int, 0, 127, -0.56, 0.82); //  Map the float onto a range which was found through extensive measuring 
    fill(255);
    text("Acceleration in X-direction in G's",250,600);
    text(""+nf(aX, 0, 2),250,650); // Output acceleration in the centre of the circle
    
    // Displaying data for acceleration in y-direction
    int aY_int = int(ay);
    int radius_aY = abs(63-aY_int);
    fill(255, 0, 0);
    circle(500, 800, radius_aY*2);
    aY = map(aY_int, 0, 127, -0.5, 0.44);
    fill(255);
    text("Acceleration in Y-direction in G's",500,750);
    text(""+nf(aY, 0, 2),500,800);
    
    // Displaying data for acceleration in x-direction
    int aZ_int = int(az);
    int radius_aZ = abs(63-aZ_int);
    fill(238,130,238); 
    circle(750, 650, radius_aZ*2);
    aZ = map(aZ_int, 0, 127, 0.6, 1.5);
    fill(255);
    text("Acceleration in Z-direction in G's",750,600);
    text(""+nf(aZ, 0, 2),750,650);
  }

}


// Start button functionality description
public void Start() {
  if (myClient.active()){
    myClient.write("l"); // Write char l to the Arduino which is the client
    println("Start Button Pressed");
  }
}

// Stop button functionality description
public void Stop() {
  if (myClient.active()){
    myClient.write("p");
    println("Stop Button Pressed");
  }
}

// Stop button functionality description
public void Manual() {
  if (myClient.active()){
    myClient.write("m");
    println("Manual Button Pressed");
  }
}

// Stop button functionality description
public void Automatic() {
  if (myClient.active()){
    myClient.write("g");
    println("Automatic Button Pressed");
  }
}


// To handle manual control of the buggy
public void keyPressed(){
 char lastKey = char(key); // Obtain last key pressed on the keyboard
 
 // Depending on what key was pressed, send the appropriate char to the arduino
 switch(lastKey) {
  case 'w': 
    println("Forward");
    myClient_2.write("w");
    break;
  case 's': 
    println("Backward");
    myClient_2.write("s");
    break;
  case 'a': 
    println("Left");
    myClient_2.write("a");
    break;
  case 'd': 
    println("Right");
    myClient_2.write("d");
    break;
  case 'e': 
    println("Spin Right");
    myClient_2.write("e");
    break;
  case 'q': 
    println("Spin Left");
    myClient_2.write("q");
    break;
  case ' ': 
    println("Stop");
    myClient_2.write("k");
    break;
  default: 
    break;
  }
  
}
